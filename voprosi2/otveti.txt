1. Наследование позволяет создавать новые классы на основе существующих, унаследуя их свойства и методы. 
Наследование способствует повторному использованию кода, так как новый класс может использовать методы из базового класса, не переписывая их заново.


2. 
private (закрытый)
public (общедоступный)
protected (защищённый)
Где
 private описывает закрытые члены класса, доступ к которым имеют только методы-члены этого класса.
 public предназначен для описания общедоступных элементов, доступ к которым возможен из любого места в программе, где доступен объект данного класса.
 protected используется тогда, когда необходимо, чтобы некоторые члены базового класса оставались закрытыми, но были бы доступны из класса-потомка.


3. Перегрузка означает, что в одной области видимости определено несколько функций с одинаковым именем. И как раз нужная функция выбирается в момент компиляции исходя из типа переданного аргумента
а переопределение - определение метода с тем же именем и сигнатурой как у базового класса


4. Множественное наследование в C++ может приводить к проблемам ромбовидного наследования, когда один базовый класс наследуется несколько раз через промежуточные классы. Без виртуального наследования дублируется часть общего предка.
Решается это виртуальным наследованием. Если оба наследования от класса к другим классам помечаются как virtual, C++ специальным образом проследит за созданием только одного подобъекта, и использование членов класса будет работать корректно.


5.
Абстрактный класс - это класс, который содержит или наследует без переопределения хотя бы одну чистую виртуальную функцию

Использование абстрактных классов может быть в случаях, когда необходимо определить класс, который не предполагает создания конкретных каких либо объектов. Например, класс фигуры: в реальности есть конкретные фигуры - квадрат, прямоугольник, треугольник, круг и так далее, но абстрактной фигуры самой по себе не существует. В то же время может потребоваться определить для всех фигур общий класс, который будет содержать общую для всех функциональность.

